{"version":3,"sources":["helper/checkNeighbors.js","helper/floodEmpty.js","components/Cell.js","helper/createGrid.js","App.js","reportWebVitals.js","index.js"],"names":["checkNeighbors","grid","x","y","numberOfMines","localY","newY","length","localX","newX","data","floodEmpty","toggled","Cell","states","started","setStarted","setGrid","alive","setAlive","className","style","animation","backgroundColor","height","window","innerHeight","innerWidth","width","onClick","newGrid","createGrid","size","row","push","i","Math","round","random","App","useState","map","cell","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54e5f97d.chunk.js","sourcesContent":["export default function checkNeighbors(grid = [], x = 0, y = 0) {\r\n    let numberOfMines = 0;\r\n    for (let localY = -1; localY <= 1; localY++) {\r\n        let newY = y + localY;\r\n        if (newY < 0 || newY >= grid.length) continue;\r\n        for (let localX = -1; localX <= 1; localX++) {\r\n            let newX = x + localX;\r\n            if (newX < 0 || newX >= grid.length || (localX === 0 && localY === 0)) continue;\r\n            numberOfMines += grid[newY][newX].data ? 1 : 0;\r\n        }\r\n    }\r\n    return numberOfMines;\r\n}","import checkNeighbors from \"./checkNeighbors\";\r\n\r\nexport default function floodEmpty(grid, x, y) {\r\n    for (let localY = -1; localY <= 1; localY++) {\r\n        let newY = y + localY;\r\n        if (newY < 0 || newY >= grid.length) continue;\r\n        for (let localX = -1; localX <= 1; localX++) {\r\n            let newX = x + localX;\r\n            if (newX < 0 || newX >= grid.length || (localX === 0 && localY === 0)) continue;\r\n            if (!checkNeighbors(grid, x, y) && !grid[newY][newX].toggled) {\r\n                grid[newY][newX].toggled = true;\r\n                grid = floodEmpty(grid, newX, newY);\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}","import checkNeighbors from '../helper/checkNeighbors';\r\nimport floodEmpty from '../helper/floodEmpty';\r\nimport './Cell.css';\r\n\r\nfunction Cell({ x, y, states: { started: [started, setStarted], grid: [grid, setGrid], alive: [alive, setAlive] } }) {\r\n    const { data, toggled } = grid[y][x];\r\n    return (\r\n        <th\r\n            className=\"Cell\"\r\n            x={x}\r\n            y={y}\r\n            style={{\r\n                animation: (!alive && data === 1) ? `shake 0.5s ease-in 0s forwards` : 'none',\r\n                backgroundColor: toggled ? '#FFF0' : '',\r\n                height: `${((window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight) - 100) / grid.length}px`,\r\n                width: `${((window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight) - 100) / grid.length}px`\r\n            }}\r\n            onClick={() => {\r\n                if (!toggled) {\r\n                    if (!started) {\r\n                        setStarted(true);\r\n                        const newGrid = [...grid];\r\n                        newGrid[y][x].data = 0;\r\n                        newGrid[y][x].toggled = true;\r\n                        setGrid(floodEmpty(newGrid, x, y));\r\n                    } else {\r\n                        if (data) {\r\n                            setAlive(false);\r\n                        } else {\r\n                            const newGrid = [...grid];\r\n                            newGrid[y][x].toggled = true;\r\n                            setGrid(floodEmpty(newGrid, x, y));\r\n                        }\r\n                    }\r\n                }\r\n            }}>{toggled ? (data ? 'ðŸ’£' : checkNeighbors(grid, x, y)) : ''}</th >\r\n    )\r\n}\r\n\r\nexport default Cell;","export default function createGrid(size = 3, numberOfMines = 0) {\r\n    let grid = [];\r\n\r\n    for (let y = 0; y < size; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < size; x++) {\r\n            row.push({ data: 0, toggled: false });\r\n        }\r\n        grid.push(row);\r\n    }\r\n\r\n    for (let i = 0; i < numberOfMines; i++) {\r\n        const x = Math.round(Math.random() * (size - 1)),\r\n            y = Math.round(Math.random() * (size - 1));\r\n        if (grid[y][x].data !== 1) {\r\n            grid[y][x].data = 1;\r\n        } else {\r\n            i--;\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}","import './App.css';\nimport Cell from './components/Cell';\nimport createGrid from './helper/createGrid';\nimport { useState } from 'react';\n\nfunction App() {\n  const [started, setStarted] = useState(false),\n    [alive, setAlive] = useState(true),\n    [grid, setGrid] = useState(createGrid(8, (8 * 8) / 4));\n  return (\n    <div className=\"App\">\n      <table className=\"Grid\">\n        <tbody>\n          {\n            grid.map((row, y) => {\n              return (\n                <tr key={y} className={`row y`}>\n                  {\n                    row.map((cell, x) => {\n                      return (<Cell key={x} x={x} y={y} states={{ started: [started, setStarted], alive: [alive, setAlive], grid: [grid, setGrid] }} />)\n                    })\n                  }\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n      <div style={{ visibility: alive ? 'hidden' : 'visible' }}>\n        <h2>Game Over</h2>\n        <button onClick={() => {\n          setGrid(createGrid(8, (8 * 8) / 4));\n          setAlive(true);\n          setStarted(false);\n        }}>New Game?</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}