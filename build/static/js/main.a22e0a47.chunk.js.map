{"version":3,"sources":["helper/checkNeighbors.js","helper/createGrid.js","components/Cell.js","App.js","reportWebVitals.js","index.js"],"names":["checkNeighbors","grid","x","y","numberOfMines","localY","newY","length","localX","newX","data","createGrid","size","row","push","toggled","i","Math","round","random","Cell","setGrid","alive","setAlive","className","style","animation","backgroundColor","height","window","innerHeight","innerWidth","width","onClick","newGrid","App","useState","map","cell","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAAe,SAASA,IAEpB,IAF6D,IAA1BC,EAAyB,uDAAlB,GAAIC,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EACrDC,EAAgB,EACXC,GAAU,EAAGA,GAAU,EAAGA,IAAU,CACzC,IAAIC,EAAOH,EAAIE,EACf,KAAIC,EAAO,GAAKA,GAAQL,EAAKM,QAC7B,IAAK,IAAIC,GAAU,EAAGA,GAAU,EAAGA,IAAU,CACzC,IAAIC,EAAOP,EAAIM,EACXC,EAAO,GAAKA,GAAQR,EAAKM,QAAsB,IAAXC,GAA2B,IAAXH,IACxDD,GAAiBH,EAAKK,GAAMG,GAAMC,KAAO,EAAI,IAGrD,OAAON,ECXI,SAASO,IAGpB,IAH6D,IAA9BC,EAA6B,uDAAtB,EAAGR,EAAmB,uDAAH,EACrDH,EAAO,GAEFE,EAAI,EAAGA,EAAIS,EAAMT,IAAK,CAE3B,IADA,IAAIU,EAAM,GACDX,EAAI,EAAGA,EAAIU,EAAMV,IACtBW,EAAIC,KAAK,CAAEJ,KAAM,EAAGK,SAAS,IAEjCd,EAAKa,KAAKD,GAGd,IAAK,IAAIG,EAAI,EAAGA,EAAIZ,EAAeY,IAAK,CACpC,IAAMd,EAAIe,KAAKC,MAAMD,KAAKE,UAAYP,EAAO,IACzCT,EAAIc,KAAKC,MAAMD,KAAKE,UAAYP,EAAO,IACnB,IAApBX,EAAKE,GAAGD,GAAGQ,KACXT,EAAKE,GAAGD,GAAGQ,KAAO,EAElBM,IAIR,OAAOf,E,iBCUImB,MA3Bf,YAA0E,IAA1DlB,EAAyD,EAAzDA,EAAGC,EAAsD,EAAtDA,EAAsD,gBAAnDF,KAAmD,GAA5CA,EAA4C,KAAtCoB,EAAsC,qBAA5BC,MAA4B,GAApBA,EAAoB,KAAbC,EAAa,OAC3CtB,EAAKE,GAAGD,GAA1BQ,EAD6D,EAC7DA,KAAMK,EADuD,EACvDA,QACd,OACI,oBACIS,UAAU,OACVtB,EAAGA,EACHC,EAAGA,EACHsB,MAAO,CACHC,UAAaJ,GAAkB,IAATZ,EAAiD,OAA5D,iCACXiB,gBAAiBZ,EAAU,QAAU,GACrCa,OAAO,GAAD,SAAOC,OAAOC,YAAcD,OAAOE,WAAaF,OAAOE,WAAaF,OAAOC,aAAe,KAAO7B,EAAKM,OAAtG,MACNyB,MAAM,GAAD,SAAOH,OAAOC,YAAcD,OAAOE,WAAaF,OAAOE,WAAaF,OAAOC,aAAe,KAAO7B,EAAKM,OAAtG,OAET0B,QAAS,WACL,IAAKlB,EAAS,CACNL,GACAa,GAAS,GAEb,IAAMW,EAAO,YAAOjC,GACpBiC,EAAQ/B,GAAGD,GAAGa,SAAU,EACxBM,EAAQa,KAjBpB,SAoBQnB,EAAWL,EAAO,eAAOV,EAAeC,EAAMC,EAAGC,GAAM,MCWxDgC,MAjCf,WAAgB,IAAD,EACaC,oBAAS,GADtB,mBACNd,EADM,KACCC,EADD,OAEWa,mBAASzB,EAAW,EAAI,KAFnC,mBAENV,EAFM,KAEAoB,EAFA,KAGb,OACE,sBAAKG,UAAU,MAAf,UACE,uBAAOA,UAAU,OAAjB,SACE,gCAEIvB,EAAKoC,KAAI,SAACxB,EAAKV,GACb,OACE,oBAAYqB,UAAS,QAArB,SAEIX,EAAIwB,KAAI,SAACC,EAAMpC,GACb,OAAQ,cAAC,EAAD,CAAcA,EAAGA,EAAGC,EAAGA,EAAGF,KAAM,CAACA,EAAMoB,GAAUC,MAAO,CAACA,EAAOC,IAArDrB,OAHhBC,UAYnB,sBAAKsB,MAAO,CAAEc,WAAYjB,EAAQ,SAAW,WAA7C,UACE,2CACA,wBAAQW,QAAS,WACfZ,EAAQV,EAAW,EAAI,KACvBY,GAAS,IAFX,8BCjBOiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a22e0a47.chunk.js","sourcesContent":["export default function checkNeighbors(grid = [], x = 0, y = 0) {\r\n    let numberOfMines = 0;\r\n    for (let localY = -1; localY <= 1; localY++) {\r\n        let newY = y + localY;\r\n        if (newY < 0 || newY >= grid.length) continue;\r\n        for (let localX = -1; localX <= 1; localX++) {\r\n            let newX = x + localX;\r\n            if (newX < 0 || newX >= grid.length || (localX === 0 && localY === 0)) continue;\r\n            numberOfMines += grid[newY][newX].data ? 1 : 0;\r\n        }\r\n    }\r\n    return numberOfMines;\r\n}","export default function createGrid(size = 3, numberOfMines = 0) {\r\n    let grid = [];\r\n\r\n    for (let y = 0; y < size; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < size; x++) {\r\n            row.push({ data: 0, toggled: false });\r\n        }\r\n        grid.push(row);\r\n    }\r\n\r\n    for (let i = 0; i < numberOfMines; i++) {\r\n        const x = Math.round(Math.random() * (size - 1)),\r\n            y = Math.round(Math.random() * (size - 1));\r\n        if (grid[y][x].data !== 1) {\r\n            grid[y][x].data = 1;\r\n        } else {\r\n            i--;\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}","import checkNeighbors from '../helper/checkNeighbors';\r\nimport createGrid from '../helper/createGrid';\r\nimport './Cell.css';\r\n\r\nfunction Cell({ x, y, grid: [grid, setGrid], alive: [alive, setAlive] }) {\r\n    const { data, toggled } = grid[y][x];\r\n    return (\r\n        <th\r\n            className=\"Cell\"\r\n            x={x}\r\n            y={y}\r\n            style={{\r\n                animation: (!alive && data === 1) ? `shake 0.5s ease-in 0s forwards` : 'none',\r\n                backgroundColor: toggled ? '#FFF0' : '',\r\n                height: `${((window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight) - 100) / grid.length}px`,\r\n                width: `${((window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight) - 100) / grid.length}px`\r\n            }}\r\n            onClick={() => {\r\n                if (!toggled) {\r\n                    if (data) {\r\n                        setAlive(false);\r\n                    }\r\n                    const newGrid = [...grid];\r\n                    newGrid[y][x].toggled = true;\r\n                    setGrid(newGrid);\r\n\r\n                }\r\n            }}>{toggled ? (data ? 'ðŸ’£' : checkNeighbors(grid, x, y)) : ''}</th >\r\n    )\r\n}\r\n\r\nexport default Cell;","import './App.css';\nimport Cell from './components/Cell';\nimport createGrid from './helper/createGrid';\nimport { useState } from 'react';\n\nfunction App() {\n  const [alive, setAlive] = useState(true);\n  const [grid, setGrid] = useState(createGrid(8, (8 * 8) / 4));\n  return (\n    <div className=\"App\">\n      <table className=\"Grid\">\n        <tbody>\n          {\n            grid.map((row, y) => {\n              return (\n                <tr key={y} className={`row y`}>\n                  {\n                    row.map((cell, x) => {\n                      return (<Cell key={x} x={x} y={y} grid={[grid, setGrid]} alive={[alive, setAlive]} />)\n                    })\n                  }\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n      <div style={{ visibility: alive ? 'hidden' : 'visible' }}>\n        <h2>Game Over</h2>\n        <button onClick={() => {\n          setGrid(createGrid(8, (8 * 8) / 4));\n          setAlive(true);\n        }}>New Game?</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}