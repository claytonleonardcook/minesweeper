{"version":3,"sources":["components/Cell.js","classes/MineSweeper.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","position","x","y","grid","minesweeper","useState","toggle","setToggle","className","onClick","target","console","log","innerHTML","MineSweeper","size","numOfMines","this","generateGrid","generateMines","row","push","i","Math","round","random","Grid","map","cell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAgBeA,MAbf,YAA8D,IAAD,IAA7CC,SAAYC,EAAiC,EAAjCA,EAAGC,EAA8B,EAA9BA,EAAoBC,EAAU,EAAzBC,YAAeD,KAAU,EAC7BE,oBAAS,GADoB,mBAClDC,EADkD,KAC1CC,EAD0C,KAEzD,OACI,oBAAIC,UAAU,OAAOC,QAAS,YAAiB,IAAdC,EAAa,EAAbA,OACzBJ,IACAK,QAAQC,IAAIX,EAAEC,GACdQ,EAAOG,UAAYV,EAAKD,GAAGD,GAC3BM,GAAU,Q,cCVLO,E,WACjB,aAAuC,IAA3BC,EAA0B,uDAAnB,EAAGC,EAAgB,uDAAH,EAAG,oBAClCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,EAClBC,KAAKd,KAAO,GACZc,KAAKC,eACLD,KAAKE,gB,gDAGT,WACI,IAAK,IAAIjB,EAAI,EAAGA,EAAIe,KAAKF,KAAMb,IAAK,CAEhC,IADA,IAAIkB,EAAM,GACDnB,EAAI,EAAGA,EAAIgB,KAAKF,KAAMd,IAC3BmB,EAAIC,KAAK,gBAEbJ,KAAKd,KAAKkB,KAAKD,M,2BAIvB,WACI,IAAK,IAAIE,EAAI,EAAGA,EAAIL,KAAKD,WAAYM,IAAK,CACtC,IAAMrB,EAAIsB,KAAKC,MAAMD,KAAKE,UAAYR,KAAKF,KAAO,IAC9Cb,EAAIqB,KAAKC,MAAMD,KAAKE,UAAYR,KAAKF,KAAO,IACzB,gBAAnBE,KAAKd,KAAKD,GAAGD,GACbgB,KAAKd,KAAKD,GAAGD,GAAK,eAElBqB,S,WCCDI,MAvBf,WACI,IAAItB,EAAc,IAAIU,EAAY,GAAI,KACtC,OACI,uBAAON,UAAU,OAAjB,SACI,gCAEQJ,EAAYD,KAAKwB,KAAI,SAACP,EAAKlB,GACvB,OACI,oBAAYM,UAAS,QAArB,SAEQY,EAAIO,KAAI,SAACC,EAAM3B,GACX,OAAQ,cAAC,EAAD,CAAMD,SAAU,CAAEC,IAAGC,KAAaE,YAAaA,GAAhBH,OAH1CC,WCDtB2B,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a58c99c7.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport './Cell.css';\r\n\r\nfunction Cell({ position: { x, y }, minesweeper: { grid } }) {\r\n    const [toggle, setToggle] = useState(true);\r\n    return (\r\n        <th className=\"Cell\" onClick={({ target }) => {\r\n            if (toggle) {\r\n                console.log(x,y);\r\n                target.innerHTML = grid[y][x];\r\n                setToggle(false);\r\n            }\r\n        }}></th >\r\n    )\r\n}\r\n\r\nexport default Cell;","export default class MineSweeper {\r\n    constructor(size = 2, numOfMines = 1) {\r\n        this.size = size;\r\n        this.numOfMines = numOfMines;\r\n        this.grid = [];\r\n        this.generateGrid();\r\n        this.generateMines();\r\n    }\r\n\r\n    generateGrid() {\r\n        for (let y = 0; y < this.size; y++) {\r\n            let row = [];\r\n            for (let x = 0; x < this.size; x++) {\r\n                row.push('ðŸŒ³');\r\n            }\r\n            this.grid.push(row);\r\n        }\r\n    }\r\n\r\n    generateMines() {\r\n        for (let i = 0; i < this.numOfMines; i++) {\r\n            const x = Math.round(Math.random() * (this.size - 1)),\r\n                y = Math.round(Math.random() * (this.size - 1));\r\n            if (this.grid[y][x] != 'ðŸ’£') {\r\n                this.grid[y][x] = 'ðŸ’£';\r\n            } else {\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n}","import Cell from './Cell';\r\nimport MineSweeper from '../classes/MineSweeper';\r\nimport './Grid.css';\r\n\r\nfunction Grid() {\r\n    let minesweeper = new MineSweeper(20, 200);\r\n    return (\r\n        <table className=\"Grid\">\r\n            <tbody>\r\n                {\r\n                    minesweeper.grid.map((row, y) => {\r\n                        return (\r\n                            <tr key={y} className={`row y`}>\r\n                                {\r\n                                    row.map((cell, x) => {\r\n                                        return (<Cell position={{ x, y }} key={x} minesweeper={minesweeper} />)\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Grid;","import './App.css';\nimport Grid from './components/Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}