{"version":3,"sources":["components/Cell.js","helper/checkNeighbors.js","components/Grid.js","helper/createGrid.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","x","y","grid","setGrid","useState","toggle","setToggle","className","onClick","target","window","location","reload","innerHTML","numberOfMines","localY","newY","length","localX","newX","console","log","document","querySelector","checkNeighbors","Grid","size","row","push","i","Math","round","random","createGrid","map","cell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0QAkBeA,MAbf,YAAwC,IAAxBC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,KAAiB,KAAXC,QACIC,oBAAS,IADF,mBAC5BC,EAD4B,KACpBC,EADoB,KAEnC,OACI,oBAAIC,UAAU,OAAOP,EAAGA,EAAGC,EAAGA,EAAGO,QAAS,YAAiB,IAAdC,EAAa,EAAbA,OACrCJ,IACmB,iBAAfH,EAAKD,GAAGD,IAAaU,OAAOC,SAASC,SACzCH,EAAOI,UCXR,WAEX,IAF6D,IAA1BX,EAAyB,uDAAlB,GAAIF,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EACrDa,EAAgB,EACXC,GAAU,EAAGA,GAAU,EAAGA,IAAU,CACzC,IAAIC,EAAOf,EAAIc,EACf,KAAIC,EAAO,GAAKA,GAAQd,EAAKe,QAC7B,IAAK,IAAIC,GAAU,EAAGA,GAAU,EAAGA,IAAU,CACzC,IAAIC,EAAOnB,EAAIkB,EACXC,EAAO,GAAKA,GAAQjB,EAAKe,QAAsB,IAAXC,GAA2B,IAAXH,IACxDK,QAAQC,IAAIC,SAASC,cAAT,mBAAmCJ,EAAnC,iBAAgDH,EAAhD,QACZF,GAAsC,iBAArBZ,EAAKc,GAAMG,GAAiB,EAAI,IAGzD,OAAOL,EDDwBU,CAAetB,EAAMF,EAAGC,GAC3CK,GAAU,Q,MEiBXmB,MAxBf,WAAiB,IAAD,EACYrB,mBCNb,WAGX,IAH6D,IAA9BsB,EAA6B,uDAAtB,EAAGZ,EAAmB,uDAAH,EACrDZ,EAAO,GAEFD,EAAI,EAAGA,EAAIyB,EAAMzB,IAAK,CAE3B,IADA,IAAI0B,EAAM,GACD3B,EAAI,EAAGA,EAAI0B,EAAM1B,IACtB2B,EAAIC,KAAK,gBAEb1B,EAAK0B,KAAKD,GAGd,IAAK,IAAIE,EAAI,EAAGA,EAAIf,EAAee,IAAK,CACpC,IAAM7B,EAAI8B,KAAKC,MAAMD,KAAKE,UAAYN,EAAO,IACzCzB,EAAI6B,KAAKC,MAAMD,KAAKE,UAAYN,EAAO,IACxB,iBAAfxB,EAAKD,GAAGD,GACRE,EAAKD,GAAGD,GAAK,eAEb6B,IAIR,OAAO3B,EDf0B+B,CAAW,EAAG,KADnC,mBACL/B,EADK,KACCC,EADD,KAGZ,OADAiB,QAAQC,IAAInB,GAER,uBAAOK,UAAU,OAAjB,SACI,gCAEQL,EAAKgC,KAAI,SAACP,EAAK1B,GACX,OACI,oBAAYM,UAAS,QAArB,SAEQoB,EAAIO,KAAI,SAACC,EAAMnC,GACX,OAAQ,cAAC,EAAD,CAAcA,EAAGA,EAAGC,EAAGA,EAAGC,KAAMA,EAAMC,QAASA,GAApCH,OAHtBC,WEHtBmC,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SAM1BZ,M","file":"static/js/main.13e7d01a.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport checkNeighbors from '../helper/checkNeighbors';\r\nimport createGrid from '../helper/createGrid';\r\nimport './Cell.css';\r\n\r\nfunction Cell({ x, y, grid, setGrid }) {\r\n    const [toggle, setToggle] = useState(true);\r\n    return (\r\n        <th className=\"Cell\" x={x} y={y} onClick={({ target }) => {\r\n            if (toggle) {\r\n                if (grid[y][x] === 'ðŸ’£') window.location.reload();\r\n                target.innerHTML = checkNeighbors(grid, x, y);\r\n                setToggle(false);\r\n            }\r\n        }}></th >\r\n    )\r\n}\r\n\r\nexport default Cell;","export default function checkNeighbors(grid = [], x = 0, y = 0) {\r\n    let numberOfMines = 0;\r\n    for (let localY = -1; localY <= 1; localY++) {\r\n        let newY = y + localY;\r\n        if (newY < 0 || newY >= grid.length) continue;\r\n        for (let localX = -1; localX <= 1; localX++) {\r\n            let newX = x + localX;\r\n            if (newX < 0 || newX >= grid.length || (localX === 0 && localY === 0)) continue;\r\n            console.log(document.querySelector(`.Cell[x='${newX}'][y='${newY}']`));\r\n            numberOfMines += grid[newY][newX] === 'ðŸ’£' ? 1 : 0;\r\n        }\r\n    }\r\n    return numberOfMines;\r\n}","import Cell from './Cell';\r\nimport './Grid.css';\r\nimport { useState } from 'react';\r\nimport createGrid from '../helper/createGrid';\r\n\r\nfunction Grid() {\r\n    const [grid, setGrid] = useState(createGrid(5, 10));\r\n    console.log(grid);\r\n    return (\r\n        <table className=\"Grid\">\r\n            <tbody>\r\n                {\r\n                    grid.map((row, y) => {\r\n                        return (\r\n                            <tr key={y} className={`row y`}>\r\n                                {\r\n                                    row.map((cell, x) => {\r\n                                        return (<Cell key={x} x={x} y={y} grid={grid} setGrid={setGrid} />)\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Grid;","export default function createGrid(size = 3, numberOfMines = 0) {\r\n    let grid = [];\r\n\r\n    for (let y = 0; y < size; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < size; x++) {\r\n            row.push('ðŸŒ³');\r\n        }\r\n        grid.push(row);\r\n    }\r\n\r\n    for (let i = 0; i < numberOfMines; i++) {\r\n        const x = Math.round(Math.random() * (size - 1)),\r\n            y = Math.round(Math.random() * (size - 1));\r\n        if (grid[y][x] !== 'ðŸ’£') {\r\n            grid[y][x] = 'ðŸ’£';\r\n        } else {\r\n            i--;\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}","import './App.css';\nimport Grid from './components/Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}